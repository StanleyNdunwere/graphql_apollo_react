[{"D:\\ReactApps\\react_graphql_apollo\\src\\index.js":"1","D:\\ReactApps\\react_graphql_apollo\\src\\App.js":"2","D:\\ReactApps\\react_graphql_apollo\\src\\reportWebVitals.js":"3","D:\\ReactApps\\react_graphql_apollo\\src\\components\\book_list\\book_list.component.jsx":"4","D:\\ReactApps\\react_graphql_apollo\\src\\schemas\\schema.js":"5"},{"size":1184,"mtime":1608938945545,"results":"6","hashOfConfig":"7"},{"size":253,"mtime":1608797539058,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":11418,"mtime":1608937735074,"results":"10","hashOfConfig":"7"},{"size":1225,"mtime":1608968567476,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rr643j",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ReactApps\\react_graphql_apollo\\src\\index.js",[],"D:\\ReactApps\\react_graphql_apollo\\src\\App.js",["24"],"D:\\ReactApps\\react_graphql_apollo\\src\\reportWebVitals.js",[],"D:\\ReactApps\\react_graphql_apollo\\src\\components\\book_list\\book_list.component.jsx",["25","26","27"],"import { useQuery, useMutation } from '@apollo/client'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { FETCH_ALL_BOOKS_QUERY, FETCH_ALL_AUTHORS_QUERY, FETCH_AN_AUTHOR_QUERY, STORE_NEW_AUTHOR_MUTATION, STORE_NEW_BOOK_MUTATION, FETCH_A_BOOK_QUERY } from '../../schemas/schema'\r\n\r\nconst BOOK = \"book\"\r\nconst AUTHOR = \"author\"\r\n\r\nexport default function BookList(props) {\r\n\r\n  const { data: bookData, loading: bookLoading } = useQuery(FETCH_ALL_BOOKS_QUERY);\r\n  const { data: authorData, loading: authorLoading } = useQuery(FETCH_ALL_AUTHORS_QUERY)\r\n  // if (!authorLoading) console.log(authorLoading, \"aithro data\")\r\n  const [details, setDetails] = useState({})\r\n\r\n  const [showOverlay, setShowOverlay] = useState(false);\r\n  const [detailsToShow, setDetailsToShow] = useState(BOOK)\r\n  const [newBook, addNewBook] = useState({});\r\n  const [newAuthor, addNewAuthor] = useState({});\r\n\r\n  const [createAuthor] = useMutation(STORE_NEW_AUTHOR_MUTATION)\r\n  const [createBook, { loading, error, data }] = useMutation(STORE_NEW_BOOK_MUTATION)\r\n\r\n  const createNewBook = () => {\r\n    createBook({ variables: { name: newBook.bookName, genre: newBook.bookGenre, authorId: newBook.authorId } })\r\n    console.log(newBook);\r\n    console.log(error);\r\n  }\r\n  const createNewAuthor = () => {\r\n    createAuthor({ variables: { name: newAuthor.authorName, age: newAuthor.authorAge } });\r\n    console.log(newAuthor);\r\n  }\r\n\r\n\r\n  return (\r\n    <div style={{\r\n      fontFamily: \"nunito, Arial\",\r\n    }}>\r\n      {showOverlay &&\r\n        <OverlayComponent\r\n          detailsToShow={detailsToShow}\r\n          displayData={details}\r\n          setOverlayVisible={setShowOverlay} />}\r\n      <h1 style={{\r\n        fontSize: \"3rem\",\r\n        fontColor: \"#bbb\"\r\n      }}>BookFest!</h1>\r\n      <p style={{\r\n        fontSize: \"2rem\",\r\n        fontColor: \"#bbb\"\r\n      }}\r\n      >Your best online plug for books</p>\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridAutoColumns: \"rows\",\r\n          gridTemplateColumns: \"1fr 1fr\"\r\n        }}>\r\n        <div>\r\n          <div\r\n            style={{\r\n              background: \"white\",\r\n              margin: \"1.5rem\",\r\n              padding: \"1.5rem\",\r\n              justifyItems: \"center\",\r\n              borderRadius: \"1rem\",\r\n              boxShadow: \"0 5px 10px #bbbbbb60\"\r\n            }}>\r\n            <h3>\r\n              Explore Our Collection\r\n              </h3>\r\n            <ul style={{\r\n              textAlign: \"left\",\r\n              listStyle: 'none',\r\n              padding: \"0\",\r\n              margin: \"0\"\r\n            }}>\r\n\r\n              {(!bookLoading) ? bookData.books.map((book) => {\r\n                return <BookListItem\r\n                  key={book.author.id + book.id}\r\n                  setDetailsToShow={setDetailsToShow}\r\n                  setOverlayVisible={setShowOverlay}\r\n                  setDetails={setDetails}\r\n                  author={book.author.name}\r\n                  title={book.name}\r\n                  authorId={book.author.id}\r\n                  bookId={book.id}\r\n                />\r\n              }) : <span></span>}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div\r\n            style={{\r\n              background: \"pink\",\r\n              margin: \"1.5rem\",\r\n              padding: \"1.5rem\",\r\n              justifyItems: \"center\",\r\n              borderRadius: \"1rem\",\r\n              boxShadow: \"0 5px 5px #bbbbbb60\"\r\n            }}>\r\n            <h3>Add New Book</h3>\r\n            <div style={{ textAlign: \"left\" }}>\r\n              <span style={{ fontWeight: \"bold\" }}>Title</span>\r\n              <input type=\"text\" style={{\r\n                padding: \"4px\",\r\n                borderRadius: \"4px\",\r\n                margin: \"0.3rem\",\r\n              }}\r\n                onChange={(e) => { addNewBook({ ...newBook, bookName: e.target.value }) }}\r\n              />\r\n              <span style={{ fontWeight: \"bold\" }}>Genre</span>\r\n              <input type=\"text\" style={{\r\n                padding: \"4px\",\r\n                borderRadius: \"4px\",\r\n                margin: \"0.3rem\",\r\n              }}\r\n                onChange={(e) => { addNewBook({ ...newBook, bookGenre: e.target.value }) }}\r\n\r\n              />\r\n              <span style={{ fontWeight: \"bold\" }} >Author</span>\r\n              <select\r\n                onChange={(e) => { addNewBook({ ...newBook, authorId: e.target.value }) }}\r\n                style={{\r\n                  padding: \"4px\",\r\n                  borderRadius: \"4px\",\r\n                  margin: \"0.3rem\",\r\n                  width: \"160px\",\r\n                  border: \"2px solid black\"\r\n                }}>\r\n                {(!authorLoading) ? authorData.authors.map((author) => {\r\n                  return <option key={author.id} value={author.id}>{author.name}</option>\r\n                }) : <span></span>}\r\n              </select>\r\n\r\n            </div>\r\n            <div style={{\r\n              width: \"100%\", textAlign: \"center\"\r\n            }}>\r\n              <p\r\n                onClick={() => { createNewBook() }}\r\n                style={{\r\n                  width: \"30%\",\r\n                  background: \"green\",\r\n                  color: \"white\",\r\n                  margin: \"10px auto\",\r\n                  padding: \"0.5rem 1rem\",\r\n                  borderRadius: \"1rem\",\r\n                }}>Create Book Listing</p>\r\n            </div>\r\n\r\n            <p style={{\r\n              fontSize: \"1.2rem\",\r\n              fontColor: \"#bbbbbb\",\r\n              textAlign: \"left\"\r\n            }}\r\n            >\r\n              <br />\r\n            </p>\r\n            <h3>Add New Author</h3>\r\n            <div style={{ textAlign: \"left\" }}>\r\n              <span style={{ fontWeight: \"bold\" }}>Name</span>\r\n              <input type=\"text\" style={{\r\n                padding: \"4px\",\r\n                borderRadius: \"4px\",\r\n                margin: \"0.3rem\",\r\n              }}\r\n                onChange={(e) => { addNewAuthor({ ...newAuthor, authorName: e.target.value }) }}\r\n              />\r\n              <span style={{ fontWeight: \"bold\" }}>Age</span>\r\n              <input type=\"text\" style={{\r\n                padding: \"4px\",\r\n                borderRadius: \"4px\",\r\n                margin: \"0.3rem\",\r\n              }}\r\n                onChange={(e) => { addNewAuthor({ ...newAuthor, authorAge: parseInt(e.target.value) }) }}\r\n\r\n              />\r\n            </div>\r\n            <div style={{\r\n              width: \"100%\", textAlign: \"center\"\r\n            }}>\r\n              <p\r\n                onClick={() => { createNewAuthor() }}\r\n                style={{\r\n                  width: \"30%\",\r\n                  background: \"green\",\r\n                  color: \"white\",\r\n                  margin: \"10px auto\",\r\n                  padding: \"0.5rem 1rem\",\r\n                  borderRadius: \"1rem\",\r\n                }}>Create New Author</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nfunction BookListItem(props) {\r\n\r\n  const { data: bookData, loading: bookLoading } = useQuery(FETCH_A_BOOK_QUERY, { variables: { id: props.bookId } })\r\n  const { data: authorData, loading: authorLoading } = useQuery(FETCH_AN_AUTHOR_QUERY, {\r\n    variables: { id: props.authorId },\r\n  })\r\n\r\n\r\n  const handleClickAuthor = (bookId) => {\r\n    if (!authorLoading) props.setDetails({ ...authorData });\r\n    props.setDetailsToShow(AUTHOR);\r\n    props.setOverlayVisible(true);\r\n  }\r\n\r\n  const handleClickBook = (bookId) => {\r\n    //set book details \r\n    if (!bookLoading) props.setDetails({ ...bookData })\r\n    props.setDetailsToShow(BOOK);\r\n    props.setOverlayVisible(true)\r\n  }\r\n\r\n  return (\r\n    <li style={{\r\n      margin: \"1rem\",\r\n      background: \"whitesmoke\",\r\n      border: \"1px solid pink\",\r\n      padding: \"1rem\",\r\n      borderRadius: \"0.5rem\",\r\n    }}>\r\n      <p>\r\n        <span style={{ fontWeight: \"bolder\", fontSize: \"1.2rem\" }}>Title: </span>\r\n        <span\r\n          onClick={() => {\r\n            handleClickBook(props.bookId);\r\n          }}\r\n          style={{\r\n            padding: \"0.2rem 2.5rem\",\r\n            background: \"green\",\r\n            color: \"whitesmoke\",\r\n            borderRadius: \"1rem\",\r\n            boxShadow: \"0 0 15px #00000050\",\r\n          }}> {props.title}</span>\r\n      </p>\r\n      <p>\r\n        <span style={{ fontWeight: \"bolder\", fontSize: \"1.2rem\" }}>Author: </span>\r\n        <span\r\n          onClick={() => {\r\n\r\n            handleClickAuthor(props.authorId);\r\n          }}\r\n          style={{\r\n            padding: \"0.2rem 2.5rem\",\r\n            background: \"green\",\r\n            color: \"whitesmoke\",\r\n            borderRadius: \"1rem\",\r\n            boxShadow: \"0 0 15px #00000050\",\r\n          }}> {props.author}</span>\r\n      </p>\r\n    </li>\r\n  )\r\n}\r\n\r\n\r\nfunction OverlayComponent(props) {\r\n  return (\r\n    <div style={{\r\n      background: \"#00000070\",\r\n      width: \"100%\",\r\n      minHeight: \"100vh\",\r\n      height: \"100%\",\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: 'center',\r\n      zIndex: 200,\r\n    }}>\r\n      <div style={{\r\n        width: \"70%\",\r\n        padding: \"2rem\",\r\n        height: \"auto\",\r\n        maxHeight: \"70%\",\r\n        background: \"whitesmoke\",\r\n        borderRadius: \"2rem\",\r\n        zIndex: 300,\r\n        overflowY: \"scroll\",\r\n      }}>\r\n        <div style={{\r\n        }}>\r\n          {props.detailsToShow === BOOK ?\r\n            (<ShowBookDetails key={Math.random() * 2000} displayData={props.displayData} />) :\r\n            (<ShowAuthorDetails key={Math.random() * 2000} displayData={props.displayData} />)}\r\n          <div style={{\r\n            width: \"100%\", textAlign: \"center\"\r\n          }}>\r\n            <p onClick={() => { props.setOverlayVisible(false) }}\r\n              style={{\r\n                width: \"30%\",\r\n                background: \"green\",\r\n                color: \"white\",\r\n                margin: \"10px auto\",\r\n                padding: \"0.5rem 1rem\",\r\n                borderRadius: \"1rem\",\r\n              }}>Close Details Page</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nfunction ShowAuthorDetails(props) {\r\n\r\n  return (\r\n    <div>\r\n      <h2 style={{ color: \"brown\" }}>\r\n        Author Details\r\n          </h2>\r\n      <h4>Author Name : <span>{props.displayData.author.name}</span></h4>\r\n      <h4>Author Age : <span>{props.displayData.author.age}</span></h4>\r\n      <h4 style={{ color: \"brown\" }}>All Books By This Author </h4>\r\n      <ul style={{\r\n        listStyle: \"none\",\r\n        margin: 0,\r\n        padding: 0,\r\n      }}>\r\n        {props.displayData.author.books.map((book) => {\r\n          return <li style={{\r\n            width: \"60%\",\r\n            paddingTop: \"15px\",\r\n            margin: \"7px auto\",\r\n            border: \"1px solid brown\",\r\n            borderRadius: \"1rem\",\r\n            background: \"#bbbbbb80\",\r\n          }}><b>Book Title :</b> <span>{book.name}</span>\r\n            <p><b>Book Genre:</b> {book.genre}</p>\r\n          </li>\r\n        })}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nfunction ShowBookDetails(props) {\r\n  return (\r\n    <div>\r\n      <h2 style={{ color: \"brown\" }}>\r\n        Book Details\r\n      </h2>\r\n      <h4>Book Name : <span>{props.displayData.book.name}</span></h4>\r\n      <h4>Book Genre : <span>{props.displayData.book.genre}</span></h4>\r\n      <ShowAuthorDetails displayData={props.displayData.book} />\r\n    </div>\r\n  )\r\n}",["28","29"],"D:\\ReactApps\\react_graphql_apollo\\src\\schemas\\schema.js",[],{"ruleId":"30","severity":1,"message":"31","line":1,"column":8,"nodeType":"32","messageId":"33","endLine":1,"endColumn":12},{"ruleId":"30","severity":1,"message":"34","line":2,"column":17,"nodeType":"32","messageId":"33","endLine":2,"endColumn":26},{"ruleId":"30","severity":1,"message":"35","line":21,"column":24,"nodeType":"32","messageId":"33","endLine":21,"endColumn":31},{"ruleId":"30","severity":1,"message":"36","line":21,"column":40,"nodeType":"32","messageId":"33","endLine":21,"endColumn":44},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'loading' is assigned a value but never used.","'data' is assigned a value but never used.","no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-global-assign","no-unsafe-negation"]